import * as addressBook from "./address-book/structs";
import * as library from "./library/structs";
import * as moduleInterface from "./module-interface/structs";
import * as policy from "./policy/structs";
import * as proposal from "./proposal/structs";
import * as settings from "./settings/structs";
import * as transaction from "./transaction/structs";
import * as user from "./user/structs";
import * as vault from "./vault/structs";
import * as workspace from "./workspace/structs";
import {StructClassLoader} from "../_framework/loader";

export function registerClasses(loader: StructClassLoader) { loader.register(library.NetworkAddress);
loader.register(addressBook.Address);
loader.register(addressBook.AddressBook);
loader.register(addressBook.AddressGroup);
loader.register(moduleInterface.AddedModuleTransaction);
loader.register(moduleInterface.BalanceChange);
loader.register(moduleInterface.ContainerRegisteredResult);
loader.register(moduleInterface.InitModuleContainerRequest);
loader.register(moduleInterface.InitVaultContainerRequest);
loader.register(moduleInterface.ModuleActionRequest);
loader.register(moduleInterface.ModuleActionResult);
loader.register(moduleInterface.ModuleCap);
loader.register(moduleInterface.ModuleCapCreated);
loader.register(moduleInterface.ModuleContainer);
loader.register(moduleInterface.ShareContainerRequired);
loader.register(moduleInterface.TxEffects);
loader.register(moduleInterface.TxEffectsResult);
loader.register(moduleInterface.VaultContainer);
loader.register(moduleInterface.VaultContainerCreated);
loader.register(vault.NamespaceInfo);
loader.register(vault.UserShareEvent);
loader.register(vault.Vault);
loader.register(vault.VaultCreated);
loader.register(vault.VaultGroup);
loader.register(vault.VaultProfile);
loader.register(vault.Vaults);
loader.register(user.AddedCapEvent);
loader.register(user.CreatedRegistrationHolderEvent);
loader.register(user.Recovery);
loader.register(user.RegistrationHolder);
loader.register(user.RetrievedUserCapsEvent);
loader.register(user.User);
loader.register(user.UserCap);
loader.register(user.UserGroup);
loader.register(user.Users);
loader.register(settings.ActionGroup);
loader.register(settings.WorkspaceSettings);
loader.register(policy.AllowedAction);
loader.register(policy.AllowedAmountAsset);
loader.register(policy.MatchedPolicyEvent);
loader.register(policy.Policy);
loader.register(policy.PolicyRule);
loader.register(proposal.Proposal);
loader.register(proposal.ProposalCreated);
loader.register(proposal.ProposalExecuted);
loader.register(transaction.ConfigTx);
loader.register(transaction.ConfigTxStatusUpdated);
loader.register(transaction.MpcTransaction);
loader.register(transaction.MpcTxStatusUpdated);
loader.register(transaction.Transactions);
loader.register(workspace.ConfigTransactionRequested);
loader.register(workspace.DwalletSignatureRequest);
loader.register(workspace.ExecutorCap);
loader.register(workspace.MpcTransactionRequested);
loader.register(workspace.ProcessedModuleActionResult);
loader.register(workspace.ProposalVote);
loader.register(workspace.Workspace);
loader.register(workspace.WorkspaceCreated);
 }
